apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'me.moallemi.advanced-build-version'

advancedVersioning {
    nameOptions {
        versionMajor 1
        versionMinor 0
        versionPatch 0
    }
    codeOptions {
        versionCodeType 'AUTO_INCREMENT_ONE_STEP'
    }

    outputOptions {
        renameOutput true
        nameFormat 'PADCGradleSample-v${versionName}'
    }
}

def appVersionName = advancedVersioning.versionName
def appVersionCode = advancedVersioning.versionCode


android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "mk.padc.projectgradlebestpractise"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode appVersionCode
        versionName appVersionName

        // Enable multidex for apps with over 64K methods Required when setting minSdkVersion to 20 or lower
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //api key variable define
        buildConfigField 'String','BaseApiKey', "\"${ApiKeySensitiveData}\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
    productFlavors{
        def BASE_URL_FIELD = "BASE_URL_FIELD"
        def BASE_URL_DEV = "\"https://dev.myserver.com/\""
        def BASE_URL_PROD = "\"https://prod.myserver.com/\""
        def BASE_URL_UAT = "\"https://uat.myserver.com/\""

        flavorDimensions "default"
        uat{
            dimension = "default"
            applicationIdSuffix = ".uat"
            manifestPlaceholders = [appName: "@string/app_name_uat"]
            buildConfigField 'String', BASE_URL_FIELD , BASE_URL_UAT
        }
        dev{
            dimension = "default"
            applicationIdSuffix = ".dev"
            manifestPlaceholders = [appName: "@string/app_name_dev"]
            buildConfigField 'String', BASE_URL_FIELD , BASE_URL_DEV
        }
        prod{
            dimension = "default"
            applicationIdSuffix = ".prod"
            manifestPlaceholders = [appName: "@string/app_name_prod"]
            buildConfigField 'String', BASE_URL_FIELD , BASE_URL_PROD
        }
    }
    // The default value for each feature is shown below. You can change the value to
    // override the default behavior.
    buildFeatures {
        // Determines whether to generate a BuildConfig class.
        buildConfig = true
        // Determines whether to support View Binding.
        // Note that the viewBinding.enabled property is now deprecated.
        viewBinding = false
        // Determines whether to support Data Binding.
        // Note that the dataBinding.enabled property is now deprecated.
        dataBinding = false
        // Determines whether to generate binder classes for your AIDL files.
        aidl = true
        // Determines whether to support RenderScript.
        renderScript = true
        // Determines whether to support injecting custom variables into the moduleâ€™s R class.
        resValues = true
        // Determines whether to support shader AOT compilation.
        shaders = true
    }
   // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true

        all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }
    aaptOptions {
        //Crunch PNG files
        cruncherEnabled = false
    }
    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // Declares that this module also depends on the 'share'
    // feature module.
    implementation project(":share")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'

    // App dependencies
    implementation rootProject.ext.libraries.appCompat
    implementation rootProject.ext.libraries.constraintLayout
    implementation rootProject.ext.libraries.glide
    implementation rootProject.ext.libraries.material

    //GSON
    implementation rootProject.ext.libraries.gson

    //Retrofit
    implementation rootProject.ext.libraries.retrofit
    implementation rootProject.ext.libraries.retrofit_converter
    implementation rootProject.ext.libraries.retrofit_adpter

    //Testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Architecture Components
}